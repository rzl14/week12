class Solution {
public:
    int movingCount(int m, int n, int k) {
        int ans = 1;
        int num[101] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        for (int i = 0; i < 91; i ++) num[i + 10] = num[i] + 1;
        bool st[101][101];
        memset(st, 0, sizeof st);
        queue<pair<int, int>> q;
        q.push({0, 0});
        while (!q.empty()) {
            int x = q.front().first, y = q.front().second;
            // cout << x << "  " << y << endl;
            if (x + 1 < n && num[x + 1] + num[y] <= k && !st[y][x + 1]) {
                q.push({x + 1, y});
                ans ++;
                st[y][x + 1] = true;
            }
            if (y + 1 < m && num[x] + num[y + 1] <= k && !st[y + 1][x]) {
                q.push({x, y + 1});
                ans ++;
                st[y + 1][x] = true;
            }
            q.pop();
        }
        return ans;
    }
};