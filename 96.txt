class Solution {
public:
    int numTrees(int n) {
        // int f[20][20], g[20];
        // f[i][j] 表示共i个节点，以j为根节点的互不相同的二叉搜索树的个数；1 <= j <= i <= 19;
        // g[k] 表示k个节点组成的互不相同的二叉搜索树的种类；
        // g[k] = Σf[k][i] = f[k][1] + f[k][2] + ... + f[k][k];
        // f[k][i] = g[i - 1] * g[k - i];
        // g[0] = 0, g[1] = 1, g[2] = 2;
        // 另 g[0] = 1, 可以计算处出正确的 g[1] , g[2] ...
        int g[20];
        memset(g, 0, sizeof g);
        g[0] = 1;
        for (int i = 1; i <= n; i ++) {
            for (int j = 1; j <= i; j ++) {
                // f[i][j] = g[j - 1] * g[i - j];
                // g[i] += f[i][j];
                // 优化： f[i][j] 只使用了一次，且在出现后立刻被使用了，后面就不再用；
                // 因此， 直接 g[i] += g[j - 1] * g[i - j] 就可以了，不需要开f数组
                g[i] += g[j - 1] * g[i - j];
            }
        }
        return g[n];
    }
};